{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ai_health_navigator/src/lib/firebase/admin.ts"],"sourcesContent":["\nimport admin from 'firebase-admin';\n\n// Check if the app is already initialized to prevent errors\nif (!admin.apps.length) {\n  // Service account key ko .env.local se direct hasil karein\n  // Isay parse karne ki zaroorat nahi agar woh pehle se a stringified JSON hai\n  const serviceAccountString = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;\n\n  if (!serviceAccountString) {\n    throw new Error('The FIREBASE_SERVICE_ACCOUNT_KEY environment variable is not set.');\n  }\n\n  // JSON string ko parse karein\n  const serviceAccount = JSON.parse(serviceAccountString);\n\n  admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n  });\n}\n\n// Initialized admin SDK ko export karein\nconst adminDb = admin.firestore();\n\nexport { admin, adminDb };\n"],"names":[],"mappings":";;;;AACA;;AAEA,4DAA4D;AAC5D,IAAI,CAAC,sIAAK,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,2DAA2D;IAC3D,6EAA6E;IAC7E,MAAM,uBAAuB,QAAQ,GAAG,CAAC,4BAA4B;IAErE,IAAI,CAAC,sBAAsB;QACzB,MAAM,IAAI,MAAM;IAClB;IAEA,8BAA8B;IAC9B,MAAM,iBAAiB,KAAK,KAAK,CAAC;IAElC,sIAAK,CAAC,aAAa,CAAC;QAClB,YAAY,sIAAK,CAAC,UAAU,CAAC,IAAI,CAAC;IACpC;AACF;AAEA,yCAAyC;AACzC,MAAM,UAAU,sIAAK,CAAC,SAAS","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ai_health_navigator/src/app/api/diagnose/route.ts"],"sourcesContent":["\nimport { NextRequest, NextResponse } from 'next/server';\nimport { admin, adminDb } from '@/lib/firebase/admin';\nimport { FieldValue } from 'firebase-admin/firestore';\n\n// Dummy diagnosis function (bina AI ke)\nasync function getDummyDiagnosis(symptoms: string): Promise<string> {\n  console.log(\"WARNING: Running in dummy mode. Billing not enabled for Gemini API.\");\n  // Ek simple, hardcoded jawab bhejein\n  const dummyResponse = `\n  ### Possible Diagnosis\n  (This is a sample response. AI diagnosis is currently disabled.)\\nBased on symptoms like **${symptoms}**, one might consider common ailments like the flu or a viral infection.\n\n  ### Initial Home-Care Remedies\n  - Get plenty of rest.\n  - Stay hydrated by drinking water or clear broths.\n  - Use over-the-counter pain relievers if necessary.\n\n  ### When to See a Doctor\n  - If symptoms persist for more than 3-4 days.\n  - If you develop a high fever or have difficulty breathing.\n  `;\n  return Promise.resolve(dummyResponse);\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const authorization = req.headers.get('Authorization');\n    if (!authorization || !authorization.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    const idToken = authorization.split('Bearer ')[1];\n    \n    let decodedToken;\n    try {\n      decodedToken = await admin.auth().verifyIdToken(idToken);\n    } catch (error) {\n      // Agar token verify nahi hota (ho sakta hai admin SDK initialize na hua ho), to aage barhein\n      console.error(\"Token verification failed, likely due to billing issue. Proceeding in dummy mode.\");\n    }\n    \n    const uid = decodedToken ? decodedToken.uid : 'dummy-user';\n\n    const { symptoms } = await req.json();\n    if (!symptoms) {\n      return NextResponse.json({ error: 'Symptoms are required' }, { status: 400 });\n    }\n\n    // Hamesha dummy diagnosis function call karein\n    const diagnosis = await getDummyDiagnosis(symptoms);\n\n    // Database me save karne ki koshish karein, lekin agar fail ho to error na dein\n    try {\n        if (uid !== 'dummy-user') {\n            const diagnosisRecord = {\n                userId: uid,\n                symptoms: symptoms,\n                diagnosis: diagnosis,\n                createdAt: FieldValue.serverTimestamp(),\n            };\n            await adminDb.collection('diagnoses').add(diagnosisRecord);\n        }\n    } catch (dbError) {\n        console.error(\"Could not save to Firestore, likely due to billing issue.\");\n    }\n\n    return NextResponse.json({ diagnosis });\n\n  } catch (error) {\n    console.error(\"Error in diagnose API (dummy mode): \", error);\n    return NextResponse.json({ error: 'Failed to process the request.' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AACA;;;;;;;;AAEA,wCAAwC;AACxC,eAAe,kBAAkB,QAAgB;IAC/C,QAAQ,GAAG,CAAC;IACZ,qCAAqC;IACrC,MAAM,gBAAgB,CAAC;;6FAEoE,EAAE,SAAS;;;;;;;;;;EAUtG,CAAC;IACD,OAAO,QAAQ,OAAO,CAAC;AACzB;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,gBAAgB,IAAI,OAAO,CAAC,GAAG,CAAC;QACtC,IAAI,CAAC,iBAAiB,CAAC,cAAc,UAAU,CAAC,YAAY;YAC1D,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QACA,MAAM,UAAU,cAAc,KAAK,CAAC,UAAU,CAAC,EAAE;QAEjD,IAAI;QACJ,IAAI;YACF,eAAe,MAAM,wKAAK,CAAC,IAAI,GAAG,aAAa,CAAC;QAClD,EAAE,OAAO,OAAO;YACd,6FAA6F;YAC7F,QAAQ,KAAK,CAAC;QAChB;QAEA,MAAM,MAAM,eAAe,aAAa,GAAG,GAAG;QAE9C,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QACnC,IAAI,CAAC,UAAU;YACb,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,+CAA+C;QAC/C,MAAM,YAAY,MAAM,kBAAkB;QAE1C,gFAAgF;QAChF,IAAI;YACA,IAAI,QAAQ,cAAc;gBACtB,MAAM,kBAAkB;oBACpB,QAAQ;oBACR,UAAU;oBACV,WAAW;oBACX,WAAW,0KAAU,CAAC,eAAe;gBACzC;gBACA,MAAM,4JAAO,CAAC,UAAU,CAAC,aAAa,GAAG,CAAC;YAC9C;QACJ,EAAE,OAAO,SAAS;YACd,QAAQ,KAAK,CAAC;QAClB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;QAAU;IAEvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}