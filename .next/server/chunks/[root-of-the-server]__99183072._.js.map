{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///home/user/ai_health_navigator/src/app/api/diagnose/route.ts"],"sourcesContent":["\nimport { NextRequest, NextResponse } from 'next/server';\n\n// Dummy AI: This function simulates a basic diagnosis AI without any external API calls.\nasync function getDummySpecialist(symptoms: string): Promise<string> {\n  console.log(\"INFO: Running in dummy specialist mode for demo.\");\n  \n  const lowerSymptoms = symptoms.toLowerCase();\n\n  // Keyword-to-Specialist Mapping\n  const keywordMap: { [key: string]: string[] } = {\n    'Cardiologist': ['heart', 'chest pain', 'blood pressure', 'palpitations'],\n    'Dermatologist': ['skin', 'rash', 'acne', 'eczema', 'mole'],\n    'Orthopedic': ['bone', 'joint', 'fracture', 'knee', 'back pain'],\n    'Neurologist': ['headache', 'migraine', 'seizure', 'numbness', 'dizziness'],\n    'Gastroenterologist': ['stomach', 'abdomen', 'indigestion', 'diarrhea', 'acid reflux'],\n    'Pulmonologist': ['breathing', 'cough', 'asthma', 'lungs'],\n    'Otolaryngologist (ENT)': ['ear', 'nose', 'throat', 'sore throat', 'sinus'],\n  };\n\n  // Find the best match\n  for (const specialist in keywordMap) {\n    const keywords = keywordMap[specialist];\n    if (keywords.some(keyword => lowerSymptoms.includes(keyword))) {\n      return specialist;\n    }\n  }\n\n  // Default fallback if no keyword matches\n  return \"General Physician\";\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { symptoms } = await req.json();\n\n    // Input validation\n    if (!symptoms || typeof symptoms !== 'string' || symptoms.trim().length === 0) {\n      return NextResponse.json({ error: 'Symptoms are required and must be a non-empty string.' }, { status: 400 });\n    }\n\n    // Call the local dummy specialist function\n    const specialist = await getDummySpecialist(symptoms);\n\n    // Return only the specialist's name\n    return NextResponse.json({ specialist: specialist });\n\n  } catch (error) {\n    console.error(\"Error in dummy diagnose API: \", error);\n    // It's good practice to not expose internal error details to the client\n    return NextResponse.json({ error: 'An internal error occurred.' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AACA;;AAEA,yFAAyF;AACzF,eAAe,mBAAmB,QAAgB;IAChD,QAAQ,GAAG,CAAC;IAEZ,MAAM,gBAAgB,SAAS,WAAW;IAE1C,gCAAgC;IAChC,MAAM,aAA0C;QAC9C,gBAAgB;YAAC;YAAS;YAAc;YAAkB;SAAe;QACzE,iBAAiB;YAAC;YAAQ;YAAQ;YAAQ;YAAU;SAAO;QAC3D,cAAc;YAAC;YAAQ;YAAS;YAAY;YAAQ;SAAY;QAChE,eAAe;YAAC;YAAY;YAAY;YAAW;YAAY;SAAY;QAC3E,sBAAsB;YAAC;YAAW;YAAW;YAAe;YAAY;SAAc;QACtF,iBAAiB;YAAC;YAAa;YAAS;YAAU;SAAQ;QAC1D,0BAA0B;YAAC;YAAO;YAAQ;YAAU;YAAe;SAAQ;IAC7E;IAEA,sBAAsB;IACtB,IAAK,MAAM,cAAc,WAAY;QACnC,MAAM,WAAW,UAAU,CAAC,WAAW;QACvC,IAAI,SAAS,IAAI,CAAC,CAAA,UAAW,cAAc,QAAQ,CAAC,WAAW;YAC7D,OAAO;QACT;IACF;IAEA,yCAAyC;IACzC,OAAO;AACT;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,mBAAmB;QACnB,IAAI,CAAC,YAAY,OAAO,aAAa,YAAY,SAAS,IAAI,GAAG,MAAM,KAAK,GAAG;YAC7E,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwD,GAAG;gBAAE,QAAQ;YAAI;QAC7G;QAEA,2CAA2C;QAC3C,MAAM,aAAa,MAAM,mBAAmB;QAE5C,oCAAoC;QACpC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,YAAY;QAAW;IAEpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,wEAAwE;QACxE,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}